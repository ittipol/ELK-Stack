input {
    http {
        port => 8081
        type => "access"
    }

    file {
        path => ["/usr/share/logs/input/apache/apache_access.log"]
        stat_interval => "5 second"
        type => "access"
    }
}

filter {

    if [url][path] == "/error" {
        mutate {
            replace => {
                "type" => "error"
            }

            add_field => {
                "[@metadata][target_index]" => "error_%{+YYYY.MM.dd}"
            }
        }
    }
    else {
        grok {
            match => { # pattarn %{SYNTAX:SEMANTIC:TYPE}
                # "message" => "%{IP:ip} - %{USER:user} \[%{HTTPDATE:date}\] \"%{WORD:method} %{URIPATHPARAM:request}"
                "message" => "%{HTTPD_COMBINEDLOG}"
            }
        }

        if "_grokparsefailure" in [tags] {
            # drop like return in function
            drop { }
        }

        date {
            # match date value of timestamp field to @timestamp field
            # match => ["{field}","date_format"]
            # 20/Sep/2017:13:25:09 +0200 => dd/MMM/yyyy:HH:mm:ss Z
            # Z mean timezone
            match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
            remove_field => ["timestamp"]
        }

        useragent {
            source => "[user_agent][original]"
            target => "[@data][user_agent]"
        }

        mutate {
            remove_field => ["event", "@version", "host"]

            add_field => {
                "[@metadata][target_index]" => "access_%{+YYYY.MM.dd}"
            }
        }        
    }

    
}

output {
    stdout {
        
    }

    file {
        # path => "/usr/share/logs/output/apache/apache_%{type}_%{+yyyyMMdd}.log"
        path => "/usr/share/logs/output/apache/%{[@metadata][target_index]}.log"
    }

    elasticsearch {
        hosts => ["http://elasticsearch:9200"]
        index => "log_%{type}_%{+yyyyMMdd}"
    }
}